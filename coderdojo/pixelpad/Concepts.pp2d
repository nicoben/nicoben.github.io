{"assets":{"script":[{"Game":{"type":"game script","start":"game.navigator = Navigator()\ngame.navigator.goto('RoomSplash')\n","loop":""}}],"room":[],"texture":[{"white_pixel.png":{"type":"image","uri":"https://s3.us-west-1.amazonaws.com/media.pixelpad.io/__ASSET__.33310.662984.1663997153.white_pixel.png"}},{"house.png":{"type":"image","uri":"https://s3.us-west-1.amazonaws.com/media.pixelpad.io/__ASSET__.33310.662984.1664133319.house.png"}},{"tree.png":{"type":"image","uri":"https://s3.us-west-1.amazonaws.com/media.pixelpad.io/__ASSET__.33310.662984.1664139054.tree.png"}},{"splash.jpg":{"type":"image","uri":"https://s3.us-west-1.amazonaws.com/media.pixelpad.io/__ASSET__.33310.662984.1664701301.splash.jpg"}}],"sound":[],"function":[{"base.py":{"type":"function script","head":"FPS = 30 # frames per second\n\nSCREEN_WIDTH = 1280\nSCREEN_MAX_X = SCREEN_WIDTH / 2\nSCREEN_MIN_X = -SCREEN_MAX_X\n\nSCREEN_HEIGHT = 720\nSCREEN_MAX_Y = SCREEN_HEIGHT / 2\nSCREEN_MIN_Y = -SCREEN_MAX_Y\n\nGRAVITY = 1\n\nclass GameBase(superclass):\n\n    def __init__(self, sprite=None):\n        super().__init__(sprite)\n        add_room_object(self)\n        self.start()\n\n    def start(self):\n        pass\n\n    def loop(self):\n        pass\n\nclass GameObject(GameBase):\n\n    def __init__(self, sprite=None):\n        self._type = \"object script\"\n        super().__init__(sprite)\n\nclass GameRoom(GameBase):\n\n    def __init__(self, sprite=None):\n        self._type = \"room script\"\n        super().__init__(sprite)\n"}},{"background.py":{"type":"function script","head":"class SplashBackground(GameObject):\n\n    def __init__(self):\n        super().__init__(new_sprite('splash.jpg'))\n        self.scaleX = 3\n        self.scaleY = 3\n\nclass PlainBackground(GameObject):\n\n    def __init__(self, color=\"#FFFFFF\"):\n        super().__init__(new_sprite('white_pixel.png'))\n\n        if type(color) == str:\n            color = rgb_hex_to_perc(color)\n\n        self.z = -1\n        self.scaleX = SCREEN_WIDTH\n        self.scaleY = SCREEN_HEIGHT\n\n        add_filter(self, new_color_replace_filter({\n            \"originalColor\": (1, 1, 1),\n            \"newColor\": color,\n            \"epsilon\": 0\n        }))\n"}},{"character.py":{"type":"function script","head":"class Character(GameObject):\n\n    def __init__(self, mode, sprite=None):\n        assert mode in ('static', 'xy', 'scale', 'skew', 'angle', 'alpha', 'z-order', 'visible')\n        self.mode = mode\n        super().__init__(sprite or new_sprite('house.png'))\n\n        self.captionText = new_text('', 0, 0)\n        self.captionText.color = 'black'\n        self.captionText.fontSize = 40\n        self.captionText.x = -620\n        self.captionText.y = 340\n        self.captionText.halign = 'left'\n        self.captionText.valign = 'top'\n\n        if self.mode == 'scale':\n            self.scaleX = 2\n            self.scaleY = 2\n        elif self.mode == 'skew':\n            self.skewX = 0\n            self.skewY = 0\n        elif self.mode == 'angle':\n            self.angle = 45\n        elif self.mode == 'alpha':\n            self.alpha = 0.5\n\n        self.timer = 0\n\n    def loop(self):\n        self.timer -= 1\n\n        if self.timer <= 0 and not key_is_pressed('control'):\n            if self.mode == 'xy':\n                self.loop_xy()\n            elif self.mode == 'scale':\n                self.loop_scale()\n            elif self.mode == 'skew':\n                self.loop_skew()\n            elif self.mode == 'angle':\n                self.loop_angle()\n            elif self.mode == 'alpha':\n                self.loop_alpha()\n            elif self.mode == 'z-order':\n                self.loop_zorder()\n            elif self.mode == 'visible':\n                self.loop_visible()\n            \n    def loop_xy(self):\n        changed = False\n        speed = 1 if key_is_pressed('shift') else 10\n        if key_is_pressed('arrowleft'):\n            self.x -= speed\n            changed = True\n        if key_is_pressed('arrowright'):\n            self.x += speed\n            changed = True\n        if key_is_pressed('arrowdown'):\n            self.y -= speed\n            changed = True\n        if key_is_pressed('arrowup'):\n            self.y += speed\n            changed = True\n        if key_is_pressed('home'):\n            self.x = 0\n            self.y = 0\n            changed = True\n        if key_is_pressed('enter'):\n            self.x, self.y = self.y, self.x\n            changed = True\n        if mouse_is_pressed('left'):\n            self.x = round(mouse_x())\n            self.y = round(mouse_y())\n            changed = True\n\n        self.captionText.text = f'house.x = {self.x}\\nhouse.y = {self.y}'\n\n        if changed:\n            self.timer = 5\n            \n    def loop_scale(self):\n        changed = False\n        speed = 0.1 if key_is_pressed('shift') else 0.5\n        if key_is_pressed('arrowleft'):\n            self.scaleX -= speed\n            changed = True\n        if key_is_pressed('arrowright'):\n            self.scaleX += speed\n            changed = True\n        if key_is_pressed('arrowdown'):\n            self.scaleY -= speed\n            changed = True\n        if key_is_pressed('arrowup'):\n            self.scaleY += speed\n            changed = True\n        if key_is_pressed('pageup'):\n            self.scaleX += speed\n            self.scaleY += speed\n            changed = True\n        if key_is_pressed('pagedown'):\n            self.scaleX -= speed\n            self.scaleY -= speed\n            changed = True\n        if key_is_pressed('enter'):\n            self.scaleX, self.scaleY = self.scaleY, self.scaleX\n            changed = True\n        if key_is_pressed('home'):\n            self.scaleX = 2\n            self.scaleY = 2\n            changed = True\n\n        self.captionText.text = f'house.scaleX = {self.scaleX:.2f}\\nhouse.scaleY = {self.scaleY:.2f}'\n\n        if changed:\n            self.timer = 5\n                    \n    def loop_skew(self):\n        changed = False\n        speed = 5 if key_is_pressed('shift') else 45\n        if key_is_pressed('arrowleft'):\n            self.skewX -= speed\n            changed = True\n        if key_is_pressed('arrowright'):\n            self.skewX += speed\n            changed = True\n        if key_is_pressed('arrowdown'):\n            self.skewY -= speed\n            changed = True\n        if key_is_pressed('arrowup'):\n            self.skewY += speed\n            changed = True\n        if key_is_pressed('pageup'):\n            self.skewX += speed\n            self.skewY += speed\n            changed = True\n        if key_is_pressed('pagedown'):\n            self.skewX -= speed\n            self.skewY -= speed\n            changed = True\n        if key_is_pressed('enter'):\n            self.skewX, self.skewY = self.skewY, self.skewX\n            changed = True\n        if key_is_pressed('home'):\n            self.skewX = 0\n            self.skewY = 0\n            changed = True\n\n        self.captionText.text = f'house.skewX = {self.skewX:.2f}\\nhouse.skewY = {self.skewY:.2f}'\n\n        if changed:\n            self.timer = 5\n                    \n    def loop_angle(self):\n        changed = False\n        speed = 5 if key_is_pressed('shift') else 15\n        if key_is_pressed('arrowleft'):\n            self.angle -= speed\n            changed = True\n        if key_is_pressed('arrowright'):\n            self.angle += speed\n            changed = True\n        if key_is_pressed('home'):\n            self.angle = 45\n            changed = True\n\n        self.captionText.text = f'house.angle = {self.angle}'\n\n        if changed:\n            self.timer = 5\n                    \n    def loop_alpha(self):\n        changed = False\n        speed = 0.01 if key_is_pressed('shift') else 0.1\n        if key_is_pressed('arrowleft'):\n            self.alpha -= speed\n            self.alpha = max(self.alpha, 0)\n            changed = True\n        if key_is_pressed('arrowright'):\n            self.alpha += speed\n            self.alpha = min(self.alpha, 1)\n            changed = True\n        if key_is_pressed('home'):\n            self.alpha = 0.5\n            changed = True\n\n        self.captionText.text = f'house.alpha = {self.alpha:.2f}'\n\n        if changed:\n            self.timer = 5\n                    \n    def loop_zorder(self):\n        changed = False\n        if key_is_pressed('arrowleft'):\n            self.z = -1\n            changed = True\n        if key_is_pressed('arrowright'):\n            self.z = 1\n            changed = True\n\n        self.captionText.text = f'house.z = {self.z}\\ntree.z = 0'\n\n        if changed:\n            self.timer = 5\n                    \n    def loop_visible(self):\n        changed = False\n        if key_is_pressed(' ') or key_is_pressed('arrowleft') or key_is_pressed('arrowright'):\n            self.visible = not self.visible\n            changed = True\n\n        self.captionText.text = f'house.visible = {self.visible}'\n\n        if changed:\n            self.timer = 5\n"}},{"navigator.py":{"type":"function script","head":"class Navigator(GameObject):\n\n    def start(self):\n        self.visible = False\n        self.persistent = True\n        self.history = []\n        self.level_map = {}\n\n    def loop(self):\n        in_help_room = 'Help' in get_room().__class__.__name__\n        help_pressed = key_was_pressed('h') or key_was_pressed('?')\n        esc_pressed = key_was_pressed('escape')\n        left_pressed = key_was_pressed('arrowleft') and key_is_pressed('control')\n        right_pressed = key_was_pressed('arrowright') and key_is_pressed('control')\n        up_pressed = key_was_pressed('arrowup') and key_is_pressed('control')\n        home_pressed = key_was_pressed('home') and key_is_pressed('control')\n\n        if in_help_room and (help_pressed or esc_pressed):\n            self.goto(self.history[-1], history=False)\n        elif help_pressed:\n            self.room_before_help = get_room()\n            self.goto('RoomHelp', history=False)\n        elif left_pressed:\n            self.go_left()\n        elif right_pressed:\n            self.go_right()\n        elif up_pressed:\n            self.go_up()\n        elif home_pressed:\n            self.go_home()\n\n    def goto(self, room, history=True):\n        set_room(room)\n        if history:\n            self.history.append(room)\n            level = get_room().level\n            self.level_map[level] = room\n            self.trace('goto')\n\n    def go_left(self):\n        if len(self.history) > 1:\n            self.history.pop()\n            previous = self.history[-1]\n            set_room(previous)\n            level = get_room().level\n            self.level_map[level] = previous\n            self.trace('go_left')\n\n    def go_right(self):\n        current = get_room()\n        next = getattr(current, 'nextRoom', None)\n        if next:\n            self.goto(next)\n\n    def go_up(self):\n        current = get_room()\n        level = getattr(current, 'level')\n        if level > 1:\n            above = self.level_map[level - 1]\n            set_room(above)            \n            self.history.append(above)\n            self.trace('go_up')\n\n    def go_home(self):\n        current = get_room()\n        level = getattr(current, 'level')\n        if level > 1:\n            home = self.level_map[1]\n            set_room(home)            \n            self.history.append(home)\n            self.trace('go_home')\n\n    def trace(self, action):\n        print(f'{action}: level={get_room().level}, history={self.history} / level_map={self.level_map}')\n"}},{"rooms.py":{"type":"function script","head":"class DemoRoom(GameRoom):\n\n    def __init__(self, level, nextRoom):\n        self.level = level\n        self.nextRoom = nextRoom\n        super().__init__()\n\n    def start(self):\n        self.bg = PlainBackground(color='#FFFFFF')\n\n    def add_header(self, header):\n        headerText = new_text(header, 0, 340)\n        headerText.color = 'red'\n        headerText.fontSize = 40\n        headerText.halign = 'center'\n        headerText.valign = 'top'\n\n    def add_footer(self, footer):\n        footerText = new_text(footer, 0, -340)\n        footerText.color = 'black'\n        footerText.fontSize = 30\n        footerText.halign = 'center'\n        footerText.valign = 'bottom'\n        footerText.skewX = 15\n\n\nclass TextRoom(DemoRoom):\n    def __init__(self, level, nextRoom, header, lines):\n        super().__init__(level, nextRoom)\n\n        self.add_header(header)\n\n        linesText = new_text('\\n'.join(lines), 0, 260)\n        linesText.color = 'black'\n        linesText.fontSize = 40\n        linesText.halign = 'center'\n        linesText.halign = 'top'\n\n\nclass RoomSplash(DemoRoom):\n    def __init__(self):\n        super().__init__(level=0, nextRoom='RoomMenu')\n        SplashBackground()\n        self.add_footer('Press H for help at any time.')\n\n\nclass RoomHelp(TextRoom):\n    def __init__(self):\n        lines = [\n            'H or ? = help page',\n            'Ctrl-Left arrow = previous page',\n            'Ctrl-Right arrow = next page',\n            'Ctrl-Up arrow = previous menu',\n            'Ctrl-Home = top-level menu',\n        ]\n\n        if hasattr(game.navigator.room_before_help, 'help'):\n            lines += [''] + game.navigator.room_before_help.help\n\n        super().__init__(level=None, nextRoom=None, header='Help', lines=lines)\n        self.add_footer('Press H or Esc to exit this page.')\n\n\nclass RoomMenu(DemoRoom):\n    def __init__(self):\n        super().__init__(level=1, nextRoom=None)\n        self.add_header('Menu')\n        button1 = Button('Coordinates', 0, 120, fg_color='#000000', bg_color='#A0A0A0', room='RoomAxisXIntro')\n        button2 = Button('Object attributes', 0, 0, fg_color='#000000', bg_color='#A0A0A0', room='RoomObjectAttributesXYIntro')\n        button3 = Button('Text attributes', 0, -120, fg_color='#000000', bg_color='#A0A0A0', room='RoomTextAttributesTextAnim')\n\n        self.add_footer('Press H for help at any time.')\n"}},{"rooms_coordinates.py":{"type":"function script","head":"class RoomAxisXIntro(TextRoom):\n    def __init__(self):\n        super().__init__(level=2, nextRoom='RoomAxisXAnim', header='X coordinate', lines=[\n            'The X coordinate measures the horizontal position along',\n            'the X-axis.',\n            '',\n            'The X-axis points to the right and ranges from -640 (far left)',\n            'to +640 (far right). The center is at X=0.',\n            '',\n            'In the left half, X is < 0. In the right half, X is > 0.',\n            '',\n            'Along a vertical line, X is always the same.',\n        ])\n\n\nclass RoomAxisXAnim(DemoRoom):\n    help = [\n        'Move the mouse left and right and see how X changes.',\n    ]\n\n    def __init__(self):\n        super().__init__(level=2, nextRoom='RoomAxisYIntro')\n        draw_grid(color='#C0C0C0', step=100, mode='x')\n        draw_axis(color='#0000FF', mode='x')\n        Dot(mode='x')\n\n\nclass RoomAxisYIntro(TextRoom):\n    def __init__(self):\n        super().__init__(level=2, nextRoom='RoomAxisYAnim', header='Y coordinate', lines=[\n            'The Y coordinate measures the vertical position along',\n            'the Y-axis.',\n            '',\n            'The Y-axis points to the top and ranges from -360 (bottom)',\n            'to +360 (top). The middle is at Y=0.',\n            '',\n            'In the bottom half, Y is < 0. In the top half, Y is > 0.',\n            '',\n            'Along a horizontal line, Y is always the same.',\n        ])\n\n\nclass RoomAxisYAnim(DemoRoom):\n    help = [\n        'Move the mouse up and down and see how Y changes.',\n    ]\n\n    def __init__(self):\n        super().__init__(level=2, nextRoom='RoomAxisXYIntro')\n        draw_grid(color='#C0C0C0', step=100, mode='y')\n        draw_axis(color='#0000FF', mode='y')\n        Dot(mode='y')\n\n\nclass RoomAxisXYIntro(TextRoom):\n    def __init__(self):\n        super().__init__(level=2, nextRoom='RoomAxisXYAnim', header='XY coordinates', lines=[\n            'Each point has different (X, Y) coordinates.',\n            '',\n            'The center of the screen is at (0, 0), aka origin.',\n            '',\n            'In the top right quadrant, X > 0 and Y > 0.',\n            'In the top left quadrant, X < 0 and Y > 0.',\n            'In the bottom left quadrant, X < 0 and Y < 0.',\n            'In the bottom right quadrant, X > 0 and Y < 0.',\n        ])\n\n\nclass RoomAxisXYAnim(DemoRoom):\n    help = [\n        'Move the mouse around and see how (X, Y) change.',\n    ]\n\n    def __init__(self):\n        super().__init__(level=2, nextRoom='RoomAxisXYQuiz')\n        draw_grid(color='#C0C0C0', step=100, mode='xy')\n        draw_axis(color='#0000FF', mode='xy')\n        Dot(mode='xy')\n\n\nclass RoomAxisXYQuiz(TextRoom):\n    def __init__(self):\n        super().__init__(level=2, nextRoom=None, header='Quiz', lines=[\n            'What are the coordinates of the screen center?',\n            '',\n            'If X > 0, where is the point?',\n            '',\n            'Where is (-640, 360)?',\n            '',\n            'What are the coordinates of the bottom right corner?',\n            '',\n            'If X > 0 and Y < 0, where is the point?',\n            '',\n            'Where is (640, 0)?',\n        ])\n"}},{"rooms_object_attrs.py":{"type":"function script","head":"class RoomObjectAttributesXYIntro(TextRoom):\n    def __init__(self):\n        super().__init__(level=2, nextRoom='RoomObjectAttributesXYAnim', header='x and y', lines=[\n            'obj.x is the object\\'s horizontal position.',\n            '',\n            'When it decreases, the object moves left.',\n            'When it increases, the object moves right.',\n            '',\n            'obj.y is the object\\'s vertical position.',\n            '',\n            'When it decreases, the object moves down.',\n            'When it increases, the object moves up.',\n            '',\n            'New objects are created with x=0 and y=0 (centered).'\n        ])\n\n\nclass RoomObjectAttributesXYAnim(DemoRoom):\n    help = [\n        '- Click anywhere to move the house.',\n        '- Press the arrow keys to move by 10.',\n        '- Press Shift + arrow keys to move by 1.',\n        '- Press Home to reset.',\n    ]\n\n    def __init__(self):\n        super().__init__(level=2, nextRoom='RoomObjectAttributesXYQuiz')\n        draw_grid(color='#C0C0C0', step=100, mode='xy')\n        draw_axis(color='#707070', mode='xy', quadrant=False)\n        Character(mode='xy')\n\n\nclass RoomObjectAttributesXYQuiz(TextRoom):\n    def __init__(self):\n        super().__init__(level=2, nextRoom='RoomObjectAttributesScaleIntro', header='Quiz', lines=[\n            'If the house is at the center of the screen, what is (x, y)?',\n            '',\n            'What happens when x increases?',\n            '',\n            'What happens when y decreases?',\n            '',\n            'What happens when only x changes?',\n            '',\n            'What happens when only y changes?',\n            '',\n            'What happens when both x and y change?',\n        ])\n\n\nclass RoomObjectAttributesScaleIntro(TextRoom):\n    def __init__(self):\n        super().__init__(level=2, nextRoom='RoomObjectAttributesScaleAnim', header='scaleX and scaleY', lines=[\n            'obj.scaleX is used to change the object\\'s width.',\n            '',\n            'When only scaleX decreases, the object becomes narrower.',\n            'When only scaleX increases, the object becomes wider.',\n            '',\n            'obj.scaleY is used to change the object\\'s height.',\n            '',\n            'When only scaleY decreases, the object becomes shorter.',\n            'When only scaleY increases, the object becomes taller.',\n            '',\n            'New objects are created with scaleX=1 and scaleY=1',\n            '(normal size).'\n        ])\n\n\nclass RoomObjectAttributesScaleAnim(DemoRoom):\n    help = [\n        '- Press the arrow keys to change by 0.5 (Shift = 0.1).',\n        '- Press PgUp/PgDn to change by 0.5 (Shift = 0.1).',\n        '- Press Home to reset.',\n    ]\n\n    def __init__(self):\n        super().__init__(level=2, nextRoom='RoomObjectAttributesScaleQuiz')\n        original = Character(mode='static')\n        original.x = -300\n        modified = Character(mode='scale')\n        modified.x = 300\n\n\nclass RoomObjectAttributesScaleQuiz(TextRoom):\n    def __init__(self):\n        super().__init__(level=2, nextRoom='RoomObjectAttributesSkewIntro', header='Quiz', lines=[\n            'What values of scaleX and scaleY give the original sprite?',\n            '',\n            'What happens when scaleX = 0 or scaleY = 0?',\n            '',\n            'What happens when only scaleX < 0?',\n            '',\n            'What happens when only scaleY < 0?',\n            '',\n            'What happens when both scaleX < 0 and scaleY < 0?',\n            '',\n            'What happens when scaleX is very different from scaleY?',\n        ])\n\n\nclass RoomObjectAttributesSkewIntro(TextRoom):\n    def __init__(self):\n        super().__init__(level=2, nextRoom='RoomObjectAttributesSkewAnim', header='skewX and skewY', lines=[\n            'obj.skewX rotates the object around the X-axis in degrees.',\n            '',\n            'obj.skewY rotates the object around the Y-axis in degrees.',\n            '',\n            'New objects are created with skewX=0 and skewY=0.',\n        ])\n\n\nclass RoomObjectAttributesSkewAnim(DemoRoom):\n    help = [\n        '- Press the arrow keys to change by 45 (Shift = 5).',\n        '- Press PgUp/PgDn to change by 45 (Shift = 5).',\n        '- Press Home to reset.',\n    ]\n\n    def __init__(self):\n        super().__init__(level=2, nextRoom='RoomObjectAttributesAngleIntro')\n        original = Character(mode='static')\n        original.x = -300\n        modified = Character(mode='skew')\n        modified.x = 300\n\n\nclass RoomObjectAttributesAngleIntro(TextRoom):\n    def __init__(self):\n        super().__init__(level=2, nextRoom='RoomObjectAttributesAngleAnim', header='angle', lines=[\n            'obj.angle is used to change the object\\'s orientation.',\n            '',\n            'Common values (in degrees) are:',\n            '- 0 = up /  north',\n            '- 90 = left / west',\n            '- 180 = down / south',\n            '- 270 = right / east',\n            '',\n            'New objects are created with angle=0.',\n        ])\n\n\nclass RoomObjectAttributesAngleAnim(DemoRoom):\n    help = [\n        '- Press the arrow keys to change by 15 (Shift = 5).',\n        '- Press Home to reset.',\n    ]\n\n    def __init__(self):\n        super().__init__(level=2, nextRoom='RoomObjectAttributesAngleQuiz')\n        original = Character(mode='static')\n        original.x = -300\n        modified = Character(mode='angle')\n        modified.x = 300\n\n\nclass RoomObjectAttributesAngleQuiz(TextRoom):\n    def __init__(self):\n        super().__init__(level=2, nextRoom='RoomObjectAttributesAlphaIntro', header='Quiz', lines=[\n            'What angle value gives the original sprite?',\n            '',\n            'What happens when angle increases?',\n            '',\n            'What happens when angle decreases?',\n            '',\n            'What happens when angle < 0?',\n            '',\n            'What happens when angle = 360 or -360?',\n            '',\n            'What happens when angle = 375 or -375?',\n        ])\n\n\nclass RoomObjectAttributesAlphaIntro(TextRoom):\n    def __init__(self):\n        super().__init__(level=2, nextRoom='RoomObjectAttributesAlphaAnim', header='alpha', lines=[\n            'obj.alpha is used to change the object\\'s transparency.',\n            '',\n            'When alpha=1, the object is opaque.',\n            '',\n            'When alpha=0, the object is invisible.',\n            '',\n            'In between, the object is more or less transparent.',\n            '',\n            'New objects are created with alpha=1.',\n        ])\n\n\nclass RoomObjectAttributesAlphaAnim(DemoRoom):\n    help = [\n        '- Press the arrow keys to change by 0.1 (Shift = 0.01).',\n        '- Press Home to reset.',\n    ]\n\n    def __init__(self):\n        super().__init__(level=2, nextRoom='RoomObjectAttributesZOrderIntro')\n\n        line = HorizontalLine(color=\"#707070\", width=10)\n        line.y = -30\n\n        original = Character(mode='static')\n        original.x = -300\n        modified = Character(mode='alpha')\n        modified.x = 300\n\n\nclass RoomObjectAttributesZOrderIntro(TextRoom):\n    def __init__(self):\n        super().__init__(level=2, nextRoom='RoomObjectAttributesZOrderAnim', header='z', lines=[\n            'obj.z is used to move the object forward or backward.',\n            '',\n            'When two or more objects overlap:',\n            '- the one with the highest z is in front of all the others;',\n            '- the one with the lowest z is behind all the others;',\n            '- if z is identical, the object created last is in front.',\n            '',\n            'New objects are created with z=0.',\n        ])\n\n\nclass RoomObjectAttributesZOrderAnim(DemoRoom):\n    help = [\n        '- Press the arrow keys to change z.',\n    ]\n\n    def __init__(self):\n        super().__init__(level=2, nextRoom='RoomObjectAttributesVisibleIntro')\n\n        tree = Character(mode='static', sprite=new_sprite('tree.png'))\n        tree.scaleX = 1.5\n        tree.scaleY = 1.5\n        \n        house = Character(mode='z-order')\n        house.x = -100\n        house.y = -65\n        house.z = 1\n        house.scaleX = 1.5\n        house.scaleY = 1.5\n\n\nclass RoomObjectAttributesVisibleIntro(TextRoom):\n    def __init__(self):\n        super().__init__(level=2, nextRoom='RoomObjectAttributesVisibleAnim', header='visible', lines=[\n            'obj.visible is used to show/hide the object.',\n            '',\n            'Only two values are possible:',\n            '- True = the object is visible;',\n            '- False = the object is invisible (hidden).',\n            '',\n            'New objects are created with visible=True.',\n        ])\n\n\nclass RoomObjectAttributesVisibleAnim(DemoRoom):\n    help = [\n        '- Press the arrow keys to change visible.',\n    ]\n\n    def __init__(self):\n        super().__init__(level=2, nextRoom='RoomObjectAttributesVisibleQuiz')\n        Character(mode='visible')\n\n\nclass RoomObjectAttributesVisibleQuiz(TextRoom):\n    def __init__(self):\n        super().__init__(level=2, nextRoom=None, header='Quiz', lines=[\n            'Besides \\'visible\\', what attributes could you use to hide an object?',\n        ])\n"}},{"rooms_text_attrs.py":{"type":"function script","head":"from math import cos, sin\n\n\nclass RoomTextAttributesTextAnim(DemoRoom):\n    def __init__(self):\n        super().__init__(level=2, nextRoom='RoomTextAttributesXYAnim')\n\n    def start(self):\n        super().start()\n        self.add_header('text')\n\n        self.caption = new_text('', -620, 250)\n        self.caption.color = 'black'\n        self.caption.fontSize = 40\n        self.caption.halign = 'left'\n        self.caption.valign = 'top'\n\n        self.text = new_text('', 0, 0)\n        self.text.color = 'black'\n        self.text.fontSize = 60\n        self.text.halign = 'center'\n\n        self.count = 0\n        self.score = 0\n\n    def loop(self):\n        self.caption.text = f\"text.text = 'Score = {self.score}'\"\n        self.text.text = f'Score = {self.score}'\n\n        self.count += 1\n        if self.count >= 30:\n            self.count = 0\n            self.score += 1\n\n\nclass RoomTextAttributesXYAnim(DemoRoom):\n    def __init__(self):\n        super().__init__(level=2, nextRoom='RoomTextAttributesScaleAnim')\n        self.add_header('x, y, halign and valign')\n\n        self.add_text(-500, 200, \"left\", \"top\")\n        self.add_text(0, 200, \"center\", \"top\")\n        self.add_text(500, 200, \"right\", \"top\")\n        self.add_text(-500, 0, \"left\", \"middle\")\n        self.add_text(0, 0, \"center\", \"middle\")\n        self.add_text(500, 0, \"right\", \"middle\")\n        self.add_text(-500, -200, \"left\", \"bottom\")\n        self.add_text(0, -200, \"center\", \"bottom\")\n        self.add_text(500, -200, \"right\", \"bottom\")\n\n    def add_text(self, x, y, halign, valign):\n        text = new_text(f\"text.x = {x}\\ntext.y = {y}\\ntext.halign = '{halign}'\\ntext.valign = '{valign}'\")\n        text.color = 'black'\n        text.x = x\n        text.y = y\n        text.halign = halign\n        text.valign = valign\n        text.fontSize = 20\n\n        dot = Square(color='#FF0000', side=10)\n        dot.x = x\n        dot.y = y\n\n\nclass RoomTextAttributesScaleAnim(DemoRoom):\n    def __init__(self):\n        super().__init__(level=2, nextRoom='RoomTextAttributesSkewAnim')\n        self.add_header('scaleX and scaleY')\n\n        self.add_text(-500, 200, -1, 1)\n        self.add_text(0, 200, 1, -1)\n        self.add_text(500, 200, -1, -1)\n        self.add_text(-500, 0, 1, 1)\n        self.add_text(0, 0, 3, 0.5)\n        self.add_text(500, 0, 0.5, 3)\n\n    def add_text(self, x, y, scaleX, scaleY):\n        text = new_text(f\"text.scaleX = {scaleX}\\ntext.scaleY = {scaleY}\")\n        text.color = 'black'\n        text.x = x\n        text.y = y\n        text.scaleX = scaleX\n        text.scaleY = scaleY\n        text.fontSize = 20\n        text.halign = 'center'\n        text.valign = 'middle'\n\n\nclass RoomTextAttributesSkewAnim(DemoRoom):\n    def __init__(self):\n        super().__init__(level=2, nextRoom='RoomTextAttributesZOrderAnim')\n        self.add_header('skewX and skewY')\n\n        self.add_text(-400, 200, 0, 0)\n        self.add_text(0, 200, 10, 0)\n        self.add_text(400, 200, 0, 10)\n        self.add_text(0, 0, -10, 0)\n        self.add_text(400, 0, 0, -10)\n\n    def add_text(self, x, y, skewX, skewY):\n        text = new_text(f\"text.skewX = {skewX}\\ntext.skewY = {skewY}\")\n        text.color = 'black'\n        text.x = x\n        text.y = y\n        text.skewX = skewX\n        text.skewY = skewY\n        text.fontSize = 40\n        text.halign = 'center'\n        text.valign = 'middle'\n\n\nclass RoomTextAttributesZOrderAnim(DemoRoom):\n    def __init__(self):\n        super().__init__(level=2, nextRoom='RoomTextAttributesVisibleAnim')\n\n    def start(self):\n        super().start()\n        self.add_header('z')\n\n        self.caption = new_text('', -620, 250)\n        self.caption.color = 'black'\n        self.caption.fontSize = 40\n        self.caption.halign = 'left'\n        self.caption.valign = 'top'\n\n        self.text = new_text('PixelPAD', 0, 0)\n        self.text.color = 'black'\n        self.text.fontSize = 60\n        self.text.halign = 'center'\n        self.text.z = 1\n\n        dot = Square(color='#FF0000', side=100)\n\n        self.count = 0\n\n    def loop(self):\n        self.caption.text = f\"text.z = {self.text.z}\\nsquare.z = 0\"\n\n        self.count += 1\n        if self.count >= 60:\n            self.count = 0\n            self.text.z *= -1\n\n\nclass RoomTextAttributesVisibleAnim(DemoRoom):\n    def __init__(self):\n        super().__init__(level=2, nextRoom='RoomTextAttributesAngleAnim')\n\n    def start(self):\n        super().start()\n        self.add_header('visible')\n\n        self.caption = new_text('', -620, 250)\n        self.caption.color = 'black'\n        self.caption.fontSize = 40\n        self.caption.halign = 'left'\n        self.caption.valign = 'top'\n\n        self.text = new_text('PixelPAD', 0, 0)\n        self.text.color = 'black'\n        self.text.fontSize = 60\n        self.text.halign = 'center'\n        self.text.z = 1\n\n        self.count = 0\n\n    def loop(self):\n        self.caption.text = f\"text.visible = {self.text.visible}\"\n\n        self.count += 1\n        if self.count >= 30:\n            self.count = 0\n            self.text.visible = not self.text.visible\n\n\nclass RoomTextAttributesAngleAnim(DemoRoom):\n    def __init__(self):\n        super().__init__(level=2, nextRoom='RoomTextAttributesFontSizeAnim')\n        self.add_header('angle')\n\n        angle = -180\n        for y in (200, 0, -200):\n            for x in (-500, 0, 500):\n                self.add_text(x, y, angle)\n                angle += 45\n\n    def add_text(self, x, y, angle):\n        text = new_text(f\"text.angle = {angle}\")\n        text.color = 'black'\n        text.x = x\n        text.y = y\n        text.halign = 'center'\n        text.valign = 'middle'\n        text.fontSize = 20\n        text.angle = angle\n\n        dot = Square(color='#FF0000', side=8)\n        dot.x = x\n        dot.y = y\n        dot.z = -1\n\n\nclass RoomTextAttributesFontSizeAnim(DemoRoom):\n    def __init__(self):\n        super().__init__(level=2, nextRoom='RoomTextAttributesFontFamilyAnim')\n        self.add_header('fontSize')\n\n        fontSize = 5\n        for y in (200, 0, -200):\n            for x in (-450, 0, 450):\n                self.add_text(x, y, fontSize)\n                fontSize += 5\n\n    def add_text(self, x, y, fontSize):\n        text = new_text(f\"text.fontSize = {fontSize}\")\n        text.color = 'black'\n        text.x = x\n        text.y = y\n        text.halign = 'center'\n        text.valign = 'middle'\n        text.fontSize = fontSize\n\n\nclass RoomTextAttributesFontFamilyAnim(DemoRoom):\n    def __init__(self):\n        super().__init__(level=2, nextRoom='RoomTextAttributesColorAnim')\n        self.add_header('fontFamily')\n\n        self.add_text(0, 200, 'sans-serif')\n        self.add_text(0, 100, 'serif')\n        self.add_text(0, 0, 'monospace')\n        self.add_text(0, -100, 'cursive')\n        self.add_text(0, -200, 'times')\n        self.add_text(0, -300, 'roboto')\n\n    def add_text(self, x, y, fontFamily):\n        text = new_text(f\"text.fontFamily = '{fontFamily}'\")\n        text.color = 'black'\n        text.x = x\n        text.y = y\n        text.halign = 'center'\n        text.valign = 'middle'\n        text.fontSize = 40\n        text.fontFamily = fontFamily\n\n\nclass RoomTextAttributesColorAnim(DemoRoom):\n    def __init__(self):\n        super().__init__(level=2, nextRoom=None)\n        self.add_header('color')\n\n        colors = [\n            'black', 'darkgrey', 'lightgrey',\n            'red', 'green', 'blue',\n            '#FF0000', '#00FF00', '#0000FF',\n            'cyan', 'magenta', 'yellow',\n            '#00FFFF', '#FF00FF', '#FFFF00',\n        ] * 5\n\n        for y in (200, 100, 0, -100, -200):\n            for x in (-400, 0, 400):\n                self.add_text(x, y, colors.pop(0))\n\n    def add_text(self, x, y, color):\n        text = new_text(f\"text.color = '{color}'\")\n        text.color = color\n        text.x = x\n        text.y = y\n        text.halign = 'center'\n        text.valign = 'middle'\n        text.fontSize = 35\n"}},{"shapes.py":{"type":"function script","head":"class Shape(GameObject):\n\n    def __init__(self, color):\n        super().__init__(new_sprite('white_pixel.png'))\n\n        if type(color) == str:\n            color = rgb_hex_to_perc(color)\n\n        add_filter(self, new_color_replace_filter({\n            \"originalColor\": (1, 1, 1),\n            \"newColor\": color,\n            \"epsilon\": 0\n        }))\n\n\nclass HorizontalLine(Shape):\n\n    def __init__(self, color=\"#FFFFFF\", width=2):\n        super().__init__(color)\n        self.scaleX = SCREEN_WIDTH\n        self.scaleY = width\n\n\nclass VerticalLine(Shape):\n\n    def __init__(self, color=\"#FFFFFF\", width=2):\n        super().__init__(color)\n        self.scaleX = width\n        self.scaleY = SCREEN_HEIGHT\n\n\nclass Rectangle(Shape):\n\n    def __init__(self, color=\"#FFFFFF\", width=100, height=60):\n        super().__init__(color)\n        self.scaleX = width\n        self.scaleY = height\n\n\nclass Square(Rectangle):\n\n    def __init__(self, color=\"#FFFFFF\", side=100):\n        super().__init__(color, width=side, height=side)\n"}},{"colors.py":{"type":"function script","head":"def rgb_hex_to_perc(rgb_hex):\n    assert len(rgb_hex) == 7 and rgb_hex.startswith('#') or len(rgb_hex) == 6\n    rgb_hex = rgb_hex.replace('#', '')\n    r_perc = int(rgb_hex[0:2], 16) / 255\n    g_perc = int(rgb_hex[2:4], 16) / 255\n    b_perc = int(rgb_hex[4:6], 16) / 255\n    rgb_perc = (r_perc, g_perc, b_perc)\n    return rgb_perc\n    \ndef rgb_perc_to_hex(rgb_perc):\n    (r_perc, g_perc, b_perc) = rgb_perc\n    r_hex = perc_to_hex(r_perc)\n    g_hex = perc_to_hex(g_perc)\n    b_hex = perc_to_hex(b_perc)\n    rgb_hex = f'#{r_hex}{g_hex}{b_hex}'\n    return rgb_hex\n    \ndef perc_to_hex(perc):\n    return f'0{int(255 * perc):x}'[-2:]\n"}},{"coordinates.py":{"type":"function script","head":"def draw_grid(color='#FFFF', step=100, mode='xy'):\n    assert mode in ('xy', 'x', 'y')\n\n    if mode in ('xy', 'x'):\n        for x in range(-600, 700, step):\n            b = VerticalLine(color)\n            b.x = x\n            if mode == 'x':\n                label = new_text(x, x, 30)\n                label.color = 'black'\n                label.fontSize = 20\n                label.halign = 'center'\n\n    if mode in ('xy', 'y'):\n        for y in range(-300, 400, step):\n            b = HorizontalLine(color)\n            b.y = y\n            if mode == 'y':\n                label = new_text(f'{y:>5}', -10, y + 13)\n                label.color = 'black'\n                label.fontSize = 20\n                label.halign = 'right'\n\n\ndef draw_axis(color='#000000', width=5, mode='xy', quadrant=True):\n    assert mode in ('xy', 'x', 'y')\n\n    if mode in ('xy', 'x'):\n        x_axis = HorizontalLine(color, width)\n        x_axis.y = 0\n\n        x_label = new_text('X', 590, 0)\n        x_label.color = color\n        x_label.fontSize = 50\n\n        if mode == 'xy':\n            minX_label = new_text('-640', -630, 40)\n            minX_label.color = 'black'\n            minX_label.fontSize = 30\n\n            maxX_label = new_text('640', 580, 40)\n            maxX_label.color = 'black'\n            maxX_label.fontSize = 30\n\n    if mode in ('xy', 'y'):\n        y_axis = VerticalLine(color, width)\n        y_axis.x = 0\n\n        y_label = new_text('Y', 20, 360)\n        y_label.color = color\n        y_label.fontSize = 50\n\n        if mode == 'xy':\n            minY_label = new_text('-360', -70, -320)\n            minY_label.color = 'black'\n            minY_label.fontSize = 30\n\n            maxY_label = new_text('360', -60, 350)\n            maxY_label.color = 'black'\n            maxY_label.fontSize = 30\n\n    if mode == 'xy' and quadrant:\n        quadrant1_label = new_text('X > 0 and Y > 0', 320, 200)\n        quadrant1_label.color = color\n        quadrant1_label.fontSize = 50\n        quadrant1_label.halign = 'center'\n\n        quadrant2_label = new_text('X < 0 and Y > 0', -320, 200)\n        quadrant2_label.color = color\n        quadrant2_label.fontSize = 50\n        quadrant2_label.halign = 'center'\n\n        quadrant3_label = new_text('X < 0 and Y < 0', -320, -140)\n        quadrant3_label.color = color\n        quadrant3_label.fontSize = 50\n        quadrant3_label.halign = 'center'\n\n        quadrant4_label = new_text('X > 0 and Y < 0', 320, -140)\n        quadrant4_label.color = color\n        quadrant4_label.fontSize = 50\n        quadrant4_label.halign = 'center'\n\n        origin_label = new_text('0, 0', 20, 40)\n        origin_label.color = 'black'\n        origin_label.fontSize = 30\n    elif mode == 'x':\n        if quadrant:\n            right_label = new_text('X > 0', 320, 200)\n            right_label.color = color\n            right_label.fontSize = 50\n            right_label.halign = 'center'\n\n            left_label = new_text('X < 0', -320, 200)\n            left_label.color = color\n            left_label.fontSize = 50\n            left_label.halign = 'center'\n\n        half = VerticalLine(color=rgb_hex_to_perc('#A0A0A0'), width=5)\n        half.z = -1\n    elif mode == 'y':\n        if quadrant:\n            top_label = new_text('Y > 0', -320, 200)\n            top_label.color = color\n            top_label.fontSize = 50\n            top_label.halign = 'center'\n\n            bottom_label = new_text('Y < 0', -320, -140)\n            bottom_label.color = color\n            bottom_label.fontSize = 50\n            bottom_label.halign = 'center'\n\n        half = HorizontalLine(color=rgb_hex_to_perc('#A0A0A0'), width=5)\n        half.z = -1\n\n\nclass Dot(GameObject):\n\n    def __init__(self, mode='xy'):\n        assert mode in ('xy', 'x', 'y')\n        super().__init__(new_sprite('white_pixel.png'))\n        self.mode = mode\n        self.x = 0\n        self.y = 0\n        self.scaleX = 20\n        self.scaleY = 20\n\n        add_filter(self, new_color_replace_filter({\n            \"originalColor\": (1, 1, 1),\n            \"newColor\": (1, 0, 0),\n            \"epsilon\": 0\n        }))\n\n        self.coordsText = new_text(' ', 0, 0)\n        self.coordsText.color = 'red'\n        self.coordsText.fontSize = 30\n        self.coordsText.aign = 'left'\n\n        crosshair_color = rgb_hex_to_perc('#FF9999')\n        self.x_line = VerticalLine(color=crosshair_color, width=2)\n        self.x_line.visible = self.mode in ('xy', 'x') \n        self.y_line = HorizontalLine(color=crosshair_color, width=2)\n        self.y_line.visible = self.mode in ('xy', 'y') \n\n    def loop(self):\n        self.x = mouse_x() if self.mode in ('xy', 'x') else 0\n        self.y = mouse_y() if self.mode in ('xy', 'y') else 0\n\n        if self.mode == 'xy':\n            label = f\"X = {int(self.x)}, Y = {int(self.y)}\"\n        elif self.mode == 'x':\n            label = f\"X = {int(self.x)}\"\n        elif self.mode == 'y':\n            label = f\"Y = {int(self.y)}\"\n        else:\n            label = ''\n\n        self.coordsText.text = label\n        # self.coordsText.x = max(self.x + (30 if self.x <= 370 else -270), -620)\n        self.coordsText.x = self.x + (30 if self.x <= 370 else -30)\n        self.coordsText.halign = 'left' if self.x <= 370 else 'right'\n        self.coordsText.y = min(self.y + 63, 360) if self.y > 0 else max(self.y + 63, -320)\n\n        self.x_line.x = self.x\n        self.y_line.y = self.y\n"}},{"widgets.py":{"type":"function script","head":"class Button(GameObject):\n\n    def __init__(self, caption, x, y, room, width=400, height=100, bg_color='#FF0000', fg_color='white', font_size=50):\n        super().__init__()\n        self.room = room\n        self.sprite = new_sprite('white_pixel.png')\n        self.x = x\n        self.y = y\n        self.scaleX = width\n        self.scaleY = height\n\n        add_filter(self, new_color_replace_filter({\n            \"originalColor\": (1, 1, 1),\n            \"newColor\": rgb_hex_to_perc(bg_color),\n            \"epsilon\": 0\n        }))\n\n        text = new_text(caption, self.x, self.y)\n        text.color = fg_color\n        text.fontSize = font_size\n        text.halign = 'center'\n        text.valign = 'middle' \n\n    def loop(self):\n        if mouse_was_pressed('left') and self.mouse_is_within_bounds():\n            game.navigator.goto(self.room)\n\n    def mouse_is_within_bounds(self):\n        x = mouse_x()\n        y = mouse_y()\n        min_x, min_y, max_x, max_y = self.bounds()\n        return x > min_x and x < max_x and y > min_y and y < max_y\n\n    def bounds(self):\n        return (\n            self.x - self.scaleX / 2,\n            self.y - self.scaleY / 2,\n            self.x + self.scaleX / 2,\n            self.y + self.scaleY / 2\n        )\n"}}]}}